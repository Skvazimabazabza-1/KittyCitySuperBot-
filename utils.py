import json
import os
from datetime import datetime, timedelta
import requests

def format_time(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    secs = seconds % 60
    return f"{hours:02d}:{minutes:02d}:{secs:02d}"

def format_coins(coins):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç"""
    return f"{coins:,}".replace(",", " ")

def is_new_day(last_date):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å"""
    if not last_date:
        return True
    last = datetime.fromisoformat(last_date).date()
    return last < datetime.now().date()

def calculate_level(exp, current_level):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞"""
    required_exp = current_level * 5
    if exp >= required_exp:
        return current_level + 1, 0
    return current_level, exp

def get_cat_status(cat_data):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ—Ç–∏–∫–∞ –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º"""
    hunger = cat_data.get('hunger', 0)
    cleanliness = cat_data.get('cleanliness', 0)
    mood = cat_data.get('mood', 0)
    health = cat_data.get('health', 0)
    
    if any(stat <= 1 for stat in [hunger, cleanliness, mood, health]):
        return "üò® –û–ø–∞—Å–Ω–æ!"
    elif any(stat <= 3 for stat in [hunger, cleanliness, mood, health]):
        return "üòê –ù—É–∂–µ–Ω —É—Ö–æ–¥"
    else:
        return "üòä –û—Ç–ª–∏—á–Ω–æ"

def test_yandex_connection(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫—É"""
    try:
        url = "https://cloud-api.yandex.net/v1/disk/"
        headers = {"Authorization": f"OAuth {token}"}
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            return True, {
                "user": data.get('user', {}).get('display_name', 'Unknown'),
                "total_space": data.get('total_space', 0),
                "used_space": data.get('used_space', 0),
                "free_space": data.get('total_space', 0) - data.get('used_space', 0)
            }
        else:
            return False, f"–û—à–∏–±–∫–∞: {response.status_code}"
            
    except Exception as e:
        return False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"

def create_default_user(user_id, username):
    """–°–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from config import CAT_NAME_OPTIONS, CAT_IMAGES, START_COINS
    
    return {
        "user_id": user_id,
        "username": username,
        "coins": START_COINS,
        "rating": 0,
        "created_at": datetime.now().isoformat(),
        "cat": {
            "name": CAT_NAME_OPTIONS[user_id % len(CAT_NAME_OPTIONS)],
            "hunger": 5,
            "cleanliness": 5,
            "mood": 5,
            "health": 5,
            "last_update": datetime.now().isoformat(),
            "level": 1,
            "exp": 0,
            "care_count": 0,
            "photo_index": user_id % len(CAT_IMAGES)
        },
        "inventory": [],
        "tasks": {},
        "used_promocodes": [],
        "daily_care_count": 0,
        "last_care_date": datetime.now().date().isoformat()
    }