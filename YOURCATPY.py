import os
import logging
import json
import random
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –¥–ª—è –æ–±–ª–∞–∫–∞
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
SAVE_PATH = SCRIPT_DIR
USERS_PATH = os.path.join(SAVE_PATH, "users")
PROMOCODES_PATH = os.path.join(SAVE_PATH, "promocodes.json")

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
os.makedirs(USERS_PATH, exist_ok=True)

# –¢–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN", "8429919809:AAE5lMwVmH86X58JFDxYRPA3bDbFMgSgtsw")
ADMIN_ID = int(os.getenv("ADMIN_ID", "5531546741"))
PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN", "")

# –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ—Ç–æ–≤ (–∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤)
CAT_IMAGES = [
    "cat1.jpg", "cat2.jpg", "cat3.jpg", "cat4.jpg", "cat5.jpg", 
    "cat7.jpg", "cat8.jpg", "cat9.jpg"
]

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
DEFAULT_USER_DATA = {
    "user_id": None,
    "username": "",
    "coins": 50,
    "rating": 0,
    "created_at": None,
    "cat": {
        "name": "–ú—É—Ä–∑–∏–∫",
        "hunger": 5,
        "cleanliness": 5,
        "mood": 5,
        "health": 5,
        "last_update": None,
        "level": 1,
        "exp": 0,
        "care_count": 0,
        "photo_index": 0
    },
    "inventory": [],
    "tasks": {},
    "used_promocodes": [],
    "daily_care_count": 0,
    "last_care_date": None
}

# –ò–º–µ–Ω–∞ –¥–ª—è –∫–æ—Ç–æ–≤
CAT_NAME_OPTIONS = [
    "–ë–∞—Ä—Å–∏–∫", "–ú—É—Ä–∑–∏–∫", "–í–∞—Å—å–∫–∞", "–†—ã–∂–∏–∫", "–°–Ω–µ–∂–æ–∫", "–ü—É—à–æ–∫", "–ö—É–∑—è", "–¢–∏–≥—Ä–∞", 
    "–õ—É–Ω–∞", "–°–∏–º–±–∞", "–û—Å–∫–∞—Ä", "–ì–∞—Ä—Ñ–∏–ª–¥", "–¢–æ–º", "–§–µ–ª–∏–∫—Å", "–ß–∞—Ä–ª–∏", "–ú–∞–∫—Å"
]

# –ò–≥—Ä—É—à–∫–∏
TOYS = {
    'i1': {'name': 'i1', 'price': 20, 'emoji': 'üéæ', 'display_name': '–ú—è—á–∏–∫ i1'},
    'i2': {'name': 'i2', 'price': 30, 'emoji': 'üêü', 'display_name': '–†—ã–±–∫–∞ i2'},
    'i3': {'name': 'i3', 'price': 40, 'emoji': 'üéØ', 'display_name': '–ú–∏—à–µ–Ω—å i3'},
    'i4': {'name': 'i4', 'price': 50, 'emoji': 'üß∂', 'display_name': '–ö–ª—É–±–æ–∫ i4'},
    'i5': {'name': 'i5', 'price': 60, 'emoji': 'üê≠', 'display_name': '–ú—ã—à–∫–∞ i5'},
    'i6': {'name': 'i6', 'price': 70, 'emoji': 'üéÅ', 'display_name': '–°—é—Ä–ø—Ä–∏–∑ i6'},
    'i7': {'name': 'i7', 'price': 80, 'emoji': 'üåü', 'display_name': '–ó–≤–µ–∑–¥–∞ i7'},
    'i8': {'name': 'i8', 'price': 100, 'emoji': 'üëë', 'display_name': '–ö–æ—Ä–æ–Ω–∞ i8'}
}

# –õ–µ–∂–∞–Ω–∫–∏
BEDS = {
    'lezanka1': {'name': 'lezanka1', 'price': 150, 'emoji': 'üõèÔ∏è', 'display_name': '–õ–µ–∂–∞–Ω–∫–∞ 1'},
    'lezanka2': {'name': 'lezanka2', 'price': 200, 'emoji': 'üè†', 'display_name': '–õ–µ–∂–∞–Ω–∫–∞ 2'},
    'lezanka3': {'name': 'lezanka3', 'price': 250, 'emoji': 'üõãÔ∏è', 'display_name': '–õ–µ–∂–∞–Ω–∫–∞ 3'},
    'lezanka4': {'name': 'lezanka4', 'price': 300, 'emoji': 'üè∞', 'display_name': '–õ–µ–∂–∞–Ω–∫–∞ 4'},
    'lezanka5': {'name': 'lezanka5', 'price': 400, 'emoji': 'üíé', 'display_name': '–õ–µ–∂–∞–Ω–∫–∞ 5'}
}

# –ü–∞–∫–µ—Ç—ã –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏
COIN_PACKAGES = {
    'coins_100': {'coins': 100, 'price': 49, 'currency': 'RUB', 'emoji': '‚≠ê', 'display_name': '100 –º–æ–Ω–µ—Ç'},
    'coins_250': {'coins': 250, 'price': 99, 'currency': 'RUB', 'emoji': 'üåüüåü', 'display_name': '250 –º–æ–Ω–µ—Ç'},
    'coins_500': {'coins': 500, 'price': 179, 'currency': 'RUB', 'emoji': 'üåüüåüüåü', 'display_name': '500 –º–æ–Ω–µ—Ç'},
    'coins_1000': {'coins': 1000, 'price': 299, 'currency': 'RUB', 'emoji': 'üí´', 'display_name': '1000 –º–æ–Ω–µ—Ç'},
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON
def get_user_file_path(user_id):
    return os.path.join(USERS_PATH, f"{user_id}.json")

def user_exists(user_id):
    return os.path.exists(get_user_file_path(user_id))

def get_user_data(user_id):
    file_path = get_user_file_path(user_id)
    if not os.path.exists(file_path):
        return None
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None

def save_user_data(user_data):
    try:
        file_path = get_user_file_path(user_data["user_id"])
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(user_data, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['user_id']}: {e}")
        return False

def create_new_user(user_id, username):
    user_data = DEFAULT_USER_DATA.copy()
    user_data["user_id"] = user_id
    user_data["username"] = username
    user_data["created_at"] = datetime.now().isoformat()
    user_data["cat"]["last_update"] = datetime.now().isoformat()
    user_data["last_care_date"] = datetime.now().date().isoformat()
    
    user_data["cat"]["name"] = random.choice(CAT_NAME_OPTIONS)
    user_data["cat"]["photo_index"] = random.randint(0, len(CAT_IMAGES) - 1)
    
    if save_user_data(user_data):
        return user_data
    return None

def get_or_create_user(user_id, username):
    user_data = get_user_data(user_id)
    if user_data:
        return user_data
    return create_new_user(user_id, username)

def get_cat_photo_path(user_data):
    if not user_data or "cat" not in user_data:
        return None
    photo_index = user_data["cat"].get("photo_index", 0)
    if 0 <= photo_index < len(CAT_IMAGES):
        photo_filename = CAT_IMAGES[photo_index]
        return os.path.join(SCRIPT_DIR, photo_filename)
    return None

async def send_cat_photo(chat_id, context, user_data, caption=""):
    photo_path = get_cat_photo_path(user_data)
    
    if photo_path and os.path.exists(photo_path):
        try:
            with open(photo_path, 'rb') as photo:
                await context.bot.send_photo(
                    chat_id=chat_id,
                    photo=photo,
                    caption=caption
                )
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            return False
    else:
        logger.error(f"–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ø—É—Ç–∏: {photo_path}")
        return False

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
async def buy_coins_menu(query, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –º–æ–Ω–µ—Ç"""
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if not user_data:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    keyboard = []
    for package_id, package in COIN_PACKAGES.items():
        price_text = f"{package['price']} {package['currency']}"
        button_text = f"{package['emoji']} {package['display_name']} - {price_text}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f'buy_{package_id}')])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='earn_coins')])
    
    await query.edit_message_text(
        f"üíé –ü–û–ö–£–ü–ö–ê –ú–û–ù–ï–¢:\n\n"
        f"üí∞ –¢–≤–æ–∏ –º–æ–Ω–µ—Ç–∫–∏: {user_data['coins']}\n\n"
        f"üéÅ –í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç –º–æ–Ω–µ—Ç:\n\n"
        f"üí≥ –û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π\n"
        f"üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ —á–µ—Ä–µ–∑ Telegram\n"
        f"‚ö° –ú–æ–Ω–µ—Ç–∫–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def start_payment(update: Update, context: ContextTypes.DEFAULT_TYPE, package_id: str):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã"""
    if not PAYMENT_PROVIDER_TOKEN:
        await update.message.reply_text(
            "‚ùå –ü–ª–∞—Ç–µ–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n"
            "–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞!"
        )
        return
    
    if package_id not in COIN_PACKAGES:
        await update.message.reply_text("‚ùå –¢–∞–∫–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return
    
    package = COIN_PACKAGES[package_id]
    user_id = update.effective_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ
    context.user_data['pending_payment'] = {
        'package_id': package_id,
        'coins': package['coins'],
        'price': package['price'],
        'currency': package['currency'],
        'user_id': user_id
    }
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
    title = f"–ü–æ–∫—É–ø–∫–∞ {package['coins']} –º–æ–Ω–µ—Ç"
    description = f"–ü–∞–∫–µ—Ç {package['display_name']} –¥–ª—è Kitty City"
    payload = f"coin_purchase_{user_id}_{package_id}"
    currency = package['currency']
    prices = [LabeledPrice(f"{package['coins']} –º–æ–Ω–µ—Ç", package['price'] * 100)]
    
    try:
        await context.bot.send_invoice(
            chat_id=update.effective_chat.id,
            title=title,
            description=description,
            payload=payload,
            provider_token=PAYMENT_PROVIDER_TOKEN,
            currency=currency,
            prices=prices,
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            is_flexible=False,
            start_parameter=package_id
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def pre_checkout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    query = update.pre_checkout_query
    try:
        await query.answer(ok=True)
        logger.info(f"Pre-checkout approved for user {query.from_user.id}")
    except Exception as e:
        logger.error(f"Pre-checkout error: {e}")
        await query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")

async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment = update.message.successful_payment
    user_id = update.effective_user.id
    
    pending_payment = context.user_data.get('pending_payment', {})
    
    if not pending_payment or pending_payment['user_id'] != user_id:
        logger.error(f"No pending payment found for user {user_id}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        return
    
    package_id = pending_payment['package_id']
    coins_to_add = pending_payment['coins']
    
    user_data = get_user_data(user_id)
    if not user_data:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
    user_data['coins'] += coins_to_add
    
    if save_user_data(user_data):
        context.user_data.pop('pending_payment', None)
        
        await update.message.reply_text(
            f"üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
            f"üíé –ü–æ–ª—É—á–µ–Ω–æ: {coins_to_add} –º–æ–Ω–µ—Ç\n"
            f"üí∞ –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è: {user_data['coins']} –º–æ–Ω–µ—Ç\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üíñ"
        )
        logger.info(f"Successful payment: user {user_id} received {coins_to_add} coins")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    user_data = get_or_create_user(user.id, user.username or user.first_name)
    
    if user_data:
        caption = (
            f"üéâ –ü—Ä–∏–≤–µ—Ç–∏–∫! –ü–æ—Å–º–æ—Ç—Ä–∏! –ö—Ç–æ —ç—Ç–æ –≤ –∫–æ—Ä–æ–±–æ—á–∫–µ?\n\n"
            f"–ù–µ—É–∂–µ–ª–∏ –∫–æ—Ç–∏–∫? –≠—Ç–æ —Ç–≤–æ–π –Ω–æ–≤—ã–π –¥—Ä—É–≥ - {user_data['cat']['name']}!\n\n"
            f"–£—Ö–∞–∂–∏–≤–∞–π –∑–∞ –Ω–∏–º, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –º–æ–Ω–µ—Ç–∫–∏ –∏ –ø–æ–∫—É–ø–∞–π –∏–≥—Ä—É—à–∫–∏!\n\n"
            f"üí´ –ó–∞ —É—Ö–æ–¥ –∑–∞ –∫–æ—Ç–∏–∫–æ–º: +3 –º–æ–Ω–µ—Ç—ã\n"
            f"‚≠ê –ü–æ–∫—É–ø–∞–π –º–æ–Ω–µ—Ç—ã –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏\n"
            f"üí´ –ù–µ –∑–∞–±—ã–≤–∞–π —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –∫–æ—Ç–∏–∫–∞!"
        )
        
        photo_sent = await send_cat_photo(update.effective_chat.id, context, user_data, caption)
        
        if not photo_sent:
            await update.message.reply_text(
                caption,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üì¶ –û–¢–ö–†–´–¢–¨ –ö–û–†–û–ë–û–ß–ö–£", callback_data='open_box')]])
            )
        else:
            await update.message.reply_text(
                "üì¶ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–æ—Ä–æ–±–æ—á–∫—É!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üì¶ –û–¢–ö–†–´–¢–¨ –ö–û–†–û–ë–û–ß–ö–£", callback_data='open_box')]])
            )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def open_box(query, context: ContextTypes.DEFAULT_TYPE):
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if not user_data:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    caption = (
        f"üéâ –ê –≤–æ—Ç –∏ —Ç–≤–æ–π –ª—É—á—à–∏–π –¥—Ä—É–≥!\n\n"
        f"–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ {user_data['cat']['name']} –≤ –º–µ–Ω—é —É—Ö–æ–¥–∞!\n\n"
        "ü™ô –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –º–æ–Ω–µ—Ç–∫–∏, —É—Ö–∞–∂–∏–≤–∞—è –∑–∞ –∫–æ—Ç–∏–∫–æ–º!\n"
        "‚≠ê –ü–æ–∫—É–ø–∞–π –º–æ–Ω–µ—Ç—ã –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏!\n"
        "üéÅ –ü–æ–∫—É–ø–∞–π –∏–≥—Ä—É—à–∫–∏ –∏ —É–ª—É—á—à–∞–π —Å–≤–æ–µ–≥–æ –∫–æ—Ç–∏–∫–∞!"
    )
    
    photo_sent = await send_cat_photo(query.message.chat_id, context, user_data, caption)
    
    if not photo_sent:
        await query.edit_message_text(
            caption,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]])
        )
    else:
        await query.delete_message()
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]])
        )

async def main_menu(query, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üò∫ –ú–æ–π –∫–æ—Ç–∏–∫", callback_data='my_cat')],
        [InlineKeyboardButton("üíñ –£—Ö–æ–¥ –∑–∞ –∫–æ—Ç–∏–∫–æ–º", callback_data='care_menu')],
        [InlineKeyboardButton("ü™ô –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–Ω–µ—Ç–∫–∏", callback_data='earn_coins')],
        [InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data='shop_menu')],
        [InlineKeyboardButton("‚≠ê –ü—Ä–æ–∫–∞—á–∫–∞", callback_data='upgrade_menu')],
        [InlineKeyboardButton("üìä –†–µ–π—Ç–∏–Ω–≥", callback_data='leaderboard')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data='instruction')]
    ]
    
    await query.edit_message_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n\n–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def instruction(query, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìñ –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –£–•–û–î–£ –ó–ê –ö–û–¢–ò–ö–û–ú:\n\n"
        "üò∫ **–ú–æ–π –∫–æ—Ç–∏–∫** - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ç–∏–∫–∞\n"
        "üíñ **–£—Ö–æ–¥ –∑–∞ –∫–æ—Ç–∏–∫–æ–º** - –ø–æ–∫–æ—Ä–º–∏—Ç—å, –ø–æ—á–∏—Å—Ç–∏—Ç—å, –ø–æ–∏–≥—Ä–∞—Ç—å (+3 –º–æ–Ω–µ—Ç–∫–∏!)\n"
        "ü™ô **–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–Ω–µ—Ç–∫–∏** - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è\n"
        "üõí **–ú–∞–≥–∞–∑–∏–Ω** - –∫—É–ø–∏—Ç—å –∏–≥—Ä—É—à–∫–∏, –ª–µ–∂–∞–Ω–∫–∏\n"
        "‚≠ê **–ü—Ä–æ–∫–∞—á–∫–∞** - —É–ª—É—á—à–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–æ—Ç–∏–∫–∞\n"
        "üìä **–†–µ–π—Ç–∏–Ω–≥** - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤\n\n"
        "üí∞ **–ó–ê–†–ê–ë–û–¢–û–ö –ú–û–ù–ï–¢:**\n"
        "‚Ä¢ –£—Ö–æ–¥ –∑–∞ –∫–æ—Ç–∏–∫–æ–º: +3 –º–æ–Ω–µ—Ç—ã\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã: +5 –º–æ–Ω–µ—Ç\n"
        "‚Ä¢ –û—Ç–∑—ã–≤: +10 –º–æ–Ω–µ—Ç\n"
        "‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞: +15 –º–æ–Ω–µ—Ç\n"
        "‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏\n\n"
        "üí° **–°–û–í–ï–¢–´:**\n"
        "‚Ä¢ –°–ª–µ–¥–∏ –∑–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –∫–æ—Ç–∏–∫–∞\n"
        "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ —É—Ö–∞–∂–∏–≤–∞–π –∑–∞ –Ω–∏–º\n"
        "‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –º–æ–Ω–µ—Ç–æ–∫"
    )
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]])
    )

async def care_menu(query, context: ContextTypes.DEFAULT_TYPE):
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if not user_data:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    cat = user_data['cat']
    reward = 3
    
    keyboard = [
        [InlineKeyboardButton(f"üçñ –ü–æ–∫–æ—Ä–º–∏—Ç—å (+{reward}ü™ô)", callback_data='care_feed')],
        [InlineKeyboardButton(f"üõÅ –ü–æ–º—ã—Ç—å (+{reward}ü™ô)", callback_data='care_clean')],
        [InlineKeyboardButton(f"üéÆ –ü–æ–∏–≥—Ä–∞—Ç—å (+{reward}ü™ô)", callback_data='care_play')],
        [InlineKeyboardButton(f"üíä –õ–µ—á–∏—Ç—å (+{reward}ü™ô)", callback_data='care_heal')],
        [InlineKeyboardButton("üì∏ –§–æ—Ç–æ –∫–æ—Ç–∏–∫–∞", callback_data='care_photo')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]
    ]
    
    status_text = (
        f"üíñ –£–•–û–î –ó–ê –ö–û–¢–ò–ö–û–ú:\n\n"
        f"üò∫ –ò–º—è: {cat['name']}\n"
        f"üçñ –ì–æ–ª–æ–¥: {cat['hunger']}/10\n"
        f"üõÅ –ß–∏—Å—Ç–æ—Ç–∞: {cat['cleanliness']}/10\n"
        f"üéÆ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {cat['mood']}/10\n"
        f"üíä –ó–¥–æ—Ä–æ–≤—å–µ: {cat['health']}/10\n"
        f"‚≠ê –£—Ä–æ–≤–µ–Ω—å: {cat['level']}\n\n"
        f"üí∞ –¢–≤–æ–∏ –º–æ–Ω–µ—Ç–∫–∏: {user_data['coins']}\n"
        f"üéØ –£—Ö–æ–¥–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {user_data.get('daily_care_count', 0)}/10\n"
        f"üíé –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —É—Ö–æ–¥: +{reward} –º–æ–Ω–µ—Ç"
    )
    
    await query.edit_message_text(
        status_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_care_action(query, context: ContextTypes.DEFAULT_TYPE, action):
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if not user_data:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    if action == 'photo':
        caption = "–¢–≤–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –∫–æ—Ç–∏–∫! üò∫"
        photo_sent = await send_cat_photo(query.message.chat_id, context, user_data, caption)
        
        if not photo_sent:
            await query.message.reply_text("–¢–≤–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –∫–æ—Ç–∏–∫! üò∫\n(–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ)")
        return
    
    today = datetime.now().date().isoformat()
    last_care_date = user_data.get('last_care_date')
    
    if last_care_date != today:
        user_data['daily_care_count'] = 0
        user_data['last_care_date'] = today
    
    if user_data['daily_care_count'] >= 10:
        await query.answer("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —É—Ö–æ–¥–æ–≤ (10/10). –ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞!")
        return
    
    reward = 3
    cat = user_data['cat']
    
    if action == 'feed':
        cat['hunger'] = min(10, cat['hunger'] + 2)
        message = f"üçñ –¢—ã –ø–æ–∫–æ—Ä–º–∏–ª –∫–æ—Ç–∏–∫–∞! –ì–æ–ª–æ–¥ +2"
    elif action == 'clean':
        cat['cleanliness'] = min(10, cat['cleanliness'] + 2)
        message = f"üõÅ –¢—ã –ø–æ–º—ã–ª –∫–æ—Ç–∏–∫–∞! –ß–∏—Å—Ç–æ—Ç–∞ +2"
    elif action == 'play':
        cat['mood'] = min(10, cat['mood'] + 2)
        message = f"üéÆ –¢—ã –ø–æ–∏–≥—Ä–∞–ª —Å –∫–æ—Ç–∏–∫–æ–º! –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ +2"
    elif action == 'heal':
        cat['health'] = min(10, cat['health'] + 2)
        message = f"üíä –¢—ã –ø–æ–ª–µ—á–∏–ª –∫–æ—Ç–∏–∫–∞! –ó–¥–æ—Ä–æ–≤—å–µ +2"
    
    user_data['coins'] += reward
    user_data['daily_care_count'] += 1
    cat['care_count'] += 1
    cat['last_update'] = datetime.now().isoformat()
    
    cat['exp'] += 1
    if cat['exp'] >= cat['level'] * 5:
        cat['level'] += 1
        cat['exp'] = 0
        message += f"\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! {cat['name']} –¥–æ—Å—Ç–∏–≥ {cat['level']} —É—Ä–æ–≤–Ω—è!"
    
    message += f"\nüí∞ –ü–æ–ª—É—á–µ–Ω–æ {reward} –º–æ–Ω–µ—Ç –∑–∞ —É—Ö–æ–¥!"
    
    if save_user_data(user_data):
        await query.answer(message)
        await care_menu(query, context)
    else:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")

async def earn_coins(query, context: ContextTypes.DEFAULT_TYPE):
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if not user_data:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    daily_count = user_data.get('daily_care_count', 0)
    care_earnings = daily_count * 3
    
    keyboard = [
        [InlineKeyboardButton("üì± –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–ª–∞–º—É (+5 –º–æ–Ω–µ—Ç)", callback_data='earn_ad')],
        [InlineKeyboardButton("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ (+10 –º–æ–Ω–µ—Ç)", callback_data='earn_review')],
        [InlineKeyboardButton("üì¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ (+15 –º–æ–Ω–µ—Ç)", callback_data='earn_invite')],
        [InlineKeyboardButton("üíñ –£—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ –∫–æ—Ç–∏–∫–æ–º", callback_data='care_menu')],
        [InlineKeyboardButton("üíé –ö—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã", callback_data='buy_coins_menu')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]
    ]
    
    await query.edit_message_text(
        f"ü™ô –ó–ê–†–ê–ë–û–¢–û–ö –ú–û–ù–ï–¢–û–ö:\n\n"
        f"üí∞ –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç: {user_data['coins']}\n"
        f"üíñ –£—Ö–æ–¥–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {daily_count}/10\n"
        f"üíé –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ —É—Ö–æ–¥: +{care_earnings} –º–æ–Ω–µ—Ç\n\n"
        f"üí° **–°–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞:**\n"
        f"‚Ä¢ –£—Ö–æ–¥ –∑–∞ –∫–æ—Ç–∏–∫–æ–º: +3 –º–æ–Ω–µ—Ç—ã\n"
        f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã: +5 –º–æ–Ω–µ—Ç\n"
        f"‚Ä¢ –û—Ç–∑—ã–≤: +10 –º–æ–Ω–µ—Ç\n"
        f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞: +15 –º–æ–Ω–µ—Ç\n"
        f"‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_earn_action(query, context: ContextTypes.DEFAULT_TYPE, action):
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if not user_data:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    earnings = {'ad': 5, 'review': 10, 'invite': 15}
    task_key = f"earn_{action}"
    
    today = datetime.now().date().isoformat()
    if task_key in user_data['tasks'] and user_data['tasks'][task_key] == today:
        await query.answer("‚ùå –í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è!")
        return
    
    user_data['coins'] += earnings[action]
    user_data['tasks'][task_key] = today
    
    messages = {
        'ad': "üì± –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã! +5 –º–æ–Ω–µ—Ç",
        'review': "‚úçÔ∏è –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! +10 –º–æ–Ω–µ—Ç", 
        'invite': "üì¢ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞! +15 –º–æ–Ω–µ—Ç"
    }
    
    if save_user_data(user_data):
        await query.answer(messages[action])
        await earn_coins(query, context)
    else:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")

async def my_cat(query, context: ContextTypes.DEFAULT_TYPE):
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if not user_data:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    cat = user_data['cat']
    daily_count = user_data.get('daily_care_count', 0)
    
    status = "üòä –û—Ç–ª–∏—á–Ω–æ"
    if any(stat <= 3 for stat in [cat['hunger'], cat['cleanliness'], cat['mood'], cat['health']]):
        status = "üòê –ù—É–∂–µ–Ω —É—Ö–æ–¥"
    if any(stat <= 1 for stat in [cat['hunger'], cat['cleanliness'], cat['mood'], cat['health']]):
        status = "üò® –û–ø–∞—Å–Ω–æ!"
    
    text = (
        f"üò∫ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–û–¢–ò–ö–ï:\n\n"
        f"üìõ –ò–º—è: {cat['name']}\n"
        f"‚≠ê –£—Ä–æ–≤–µ–Ω—å: {cat['level']}\n"
        f"üìä –û–ø—ã—Ç: {cat['exp']}/{cat['level'] * 5}\n"
        f"üéØ –°—Ç–∞—Ç—É—Å: {status}\n\n"
        f"üìä –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:\n"
        f"üçñ –ì–æ–ª–æ–¥: {cat['hunger']}/10\n"
        f"üõÅ –ß–∏—Å—Ç–æ—Ç–∞: {cat['cleanliness']}/10\n"
        f"üéÆ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {cat['mood']}/10\n"
        f"üíä –ó–¥–æ—Ä–æ–≤—å–µ: {cat['health']}/10\n\n"
        f"üí∞ –ú–æ–Ω–µ—Ç–∫–∏: {user_data['coins']}\n"
        f"‚ù§Ô∏è –í—Å–µ–≥–æ —É—Ö–æ–¥–æ–≤: {cat['care_count']}\n"
        f"üìÖ –£—Ö–æ–¥–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {daily_count}/10\n"
        f"üíé –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —É—Ö–æ–¥: +3 –º–æ–Ω–µ—Ç—ã"
    )
    
    keyboard = [
        [InlineKeyboardButton("üíñ –£—Ö–∞–∂–∏–≤–∞—Ç—å (+3 –º–æ–Ω–µ—Ç—ã)", callback_data='care_menu')],
        [InlineKeyboardButton("üì∏ –§–æ—Ç–æ –∫–æ—Ç–∏–∫–∞", callback_data='care_photo')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def shop_menu(query, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üéÆ –ò–≥—Ä—É—à–∫–∏", callback_data='toys_shop')],
        [InlineKeyboardButton("üõèÔ∏è –õ–µ–∂–∞–Ω–∫–∏", callback_data='beds_shop')],
        [InlineKeyboardButton("üíé –ö—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã", callback_data='buy_coins_menu')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]
    ]
    
    await query.edit_message_text(
        "üõí –ú–ê–ì–ê–ó–ò–ù:\n\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def toys_shop(query, context: ContextTypes.DEFAULT_TYPE):
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if not user_data:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    keyboard = []
    for toy_id, toy in TOYS.items():
        has_toy = any(item['name'] == toy_id for item in user_data['inventory'])
        status = "‚úÖ –ö—É–ø–ª–µ–Ω–æ" if has_toy else f"ü™ô {toy['price']} –º–æ–Ω–µ—Ç"
        button_text = f"{toy['emoji']} {toy['display_name']} - {status}"
        if not has_toy:
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f'buy_{toy_id}')])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='shop_menu')])
    
    await query.edit_message_text(
        f"üéÆ –ú–ê–ì–ê–ó–ò–ù –ò–ì–†–£–®–ï–ö:\n\n"
        f"üí∞ –¢–≤–æ–∏ –º–æ–Ω–µ—Ç–∫–∏: {user_data['coins']}\n\n"
        f"–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É—à–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def beds_shop(query, context: ContextTypes.DEFAULT_TYPE):
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if not user_data:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    keyboard = []
    for bed_id, bed in BEDS.items():
        has_bed = any(item['name'] == bed_id for item in user_data['inventory'])
        status = "‚úÖ –ö—É–ø–ª–µ–Ω–æ" if has_bed else f"ü™ô {bed['price']} –º–æ–Ω–µ—Ç"
        button_text = f"{bed['emoji']} {bed['display_name']} - {status}"
        if not has_bed:
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f'buy_{bed_id}')])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='shop_menu')])
    
    await query.edit_message_text(
        f"üõèÔ∏è –ú–ê–ì–ê–ó–ò–ù –õ–ï–ñ–ê–ù–û–ö:\n\n"
        f"üí∞ –¢–≤–æ–∏ –º–æ–Ω–µ—Ç–∫–∏: {user_data['coins']}\n\n"
        f"–í—ã–±–µ—Ä–∏ –ª–µ–∂–∞–Ω–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_buy_action(query, context: ContextTypes.DEFAULT_TYPE, item_id):
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if not user_data:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    if item_id in TOYS:
        item_data = TOYS[item_id]
        category = 'toys_shop'
        price = item_data['price']
        user_balance = user_data['coins']
    elif item_id in BEDS:
        item_data = BEDS[item_id]
        category = 'beds_shop'
        price = item_data['price']
        user_balance = user_data['coins']
    elif item_id in COIN_PACKAGES:
        await start_payment(query, context, item_id)
        return
    else:
        await query.answer("‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ!")
        return
    
    if user_balance < price:
        await query.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ {price} –º–æ–Ω–µ—Ç.")
        return
    
    if item_id in TOYS or item_id in BEDS:
        if any(item['name'] == item_id for item in user_data['inventory']):
            await query.answer("‚ùå –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            return
    
    user_data['coins'] -= price
    user_data['inventory'].append({
        'name': item_id,
        'type': 'toy' if item_id in TOYS else 'bed',
        'purchased_at': datetime.now().isoformat()
    })
    success_message = f"‚úÖ –¢—ã –∫—É–ø–∏–ª {item_data['display_name']}!"
    
    if save_user_data(user_data):
        await query.answer(success_message)
        if category == 'toys_shop':
            await toys_shop(query, context)
        elif category == 'beds_shop':
            await beds_shop(query, context)
    else:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")

async def upgrade_cat_menu(query, context: ContextTypes.DEFAULT_TYPE):
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if not user_data:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    cat = user_data['cat']
    
    keyboard = [
        [InlineKeyboardButton(f"üçñ –£–ª—É—á—à–∏—Ç—å –≥–æ–ª–æ–¥ (10 –º–æ–Ω–µ—Ç) - —É—Ä. {cat['hunger']}", callback_data='upgrade_hunger')],
        [InlineKeyboardButton(f"üõÅ –£–ª—É—á—à–∏—Ç—å —á–∏—Å—Ç–æ—Ç—É (10 –º–æ–Ω–µ—Ç) - —É—Ä. {cat['cleanliness']}", callback_data='upgrade_cleanliness')],
        [InlineKeyboardButton(f"üéÆ –£–ª—É—á—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (10 –º–æ–Ω–µ—Ç) - —É—Ä. {cat['mood']}", callback_data='upgrade_mood')],
        [InlineKeyboardButton(f"üíä –£–ª—É—á—à–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ (10 –º–æ–Ω–µ—Ç) - —É—Ä. {cat['health']}", callback_data='upgrade_health')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]
    ]
    
    await query.edit_message_text(
        "‚≠ê –ü–†–û–ö–ê–ß–ö–ê –ö–û–¢–ò–ö–ê:\n\n"
        "–£–ª—É—á—à–∞–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å–≤–æ–µ–≥–æ –∫–æ—Ç–∏–∫–∞!\n"
        f"üí∞ –¢–≤–æ–∏ –º–æ–Ω–µ—Ç–∫–∏: {user_data['coins']}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_upgrade_action(query, context: ContextTypes.DEFAULT_TYPE, action):
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if not user_data:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    cost = 10
    
    if user_data['coins'] < cost:
        await query.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ {cost} –º–æ–Ω–µ—Ç.")
        return
    
    cat = user_data['cat']
    stat_names = {
        'hunger': '–≥–æ–ª–æ–¥',
        'cleanliness': '—á–∏—Å—Ç–æ—Ç—É', 
        'mood': '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
        'health': '–∑–¥–æ—Ä–æ–≤—å–µ'
    }
    
    if cat[action] >= 10:
        await query.answer(f"‚ùå {stat_names[action].title()} —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!")
        return
    
    cat[action] += 1
    user_data['coins'] -= cost
    
    if save_user_data(user_data):
        await query.answer(f"‚úÖ –¢—ã —É–ª—É—á—à–∏–ª {stat_names[action]} –∫–æ—Ç–∏–∫–∞ –¥–æ —É—Ä–æ–≤–Ω—è {cat[action]}!")
        await upgrade_cat_menu(query, context)
    else:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")

async def show_leaderboard(query, context: ContextTypes.DEFAULT_TYPE):
    user_files = [f for f in os.listdir(USERS_PATH) if f.endswith('.json')]
    users = []
    
    for user_file in user_files:
        try:
            user_id = int(user_file.split('.')[0])
            user_data = get_user_data(user_id)
            if user_data:
                cat = user_data['cat']
                rating = cat['level'] * 10 + cat['care_count']
                user_data['calculated_rating'] = rating
                users.append(user_data)
        except:
            continue
    
    users.sort(key=lambda x: x['calculated_rating'], reverse=True)
    
    text = "üìä –¢–û–ü-10 –ò–ì–†–û–ö–û–í:\n\n"
    
    for i, user in enumerate(users[:10], 1):
        username = user['username'] or f"–ò–≥—Ä–æ–∫ {user['user_id']}"
        cat = user['cat']
        text += f"{i}. {username} - ‚≠ê –£—Ä. {cat['level']} | ‚ù§Ô∏è {cat['care_count']} —É—Ö–æ–¥–æ–≤\n"
    
    if not users:
        text += "–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üíå –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨:\n\n"
        "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ —Ç—ã –Ω–∞—à–µ–ª –æ—à–∏–±–∫—É, "
        "–Ω–∞–ø–∏—à–∏ –Ω–∞–º: @KittyCitySupport\n\n"
        "–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã —É—Å–ª—ã—à–∞—Ç—å —Ç–≤–æ–µ –º–Ω–µ–Ω–∏–µ! üíñ"
    )

# –ü—Ä–æ–º–æ–∫–æ–¥—ã
def load_promocodes():
    if os.path.exists(PROMOCODES_PATH):
        try:
            with open(PROMOCODES_PATH, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}
    return {}

def save_promocodes(promocodes):
    try:
        with open(PROMOCODES_PATH, 'w', encoding='utf-8') as f:
            json.dump(promocodes, f, ensure_ascii=False, indent=2)
        return True
    except:
        return False

async def use_promo_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promo <–∫–æ–¥>")
        return
    
    promo_code = context.args[0].upper()
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    
    if not user_data:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    promocodes = load_promocodes()
    
    if promo_code not in promocodes:
        await update.message.reply_text("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!")
        return
    
    promo_data = promocodes[promo_code]
    
    if 'expires' in promo_data:
        expires = datetime.fromisoformat(promo_data['expires'])
        if datetime.now() > expires:
            await update.message.reply_text("‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç–µ–∫!")
            return
    
    if promo_data.get('used', 0) >= promo_data.get('limit', 1):
        await update.message.reply_text("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑!")
        return
    
    if promo_code in user_data['used_promocodes']:
        await update.message.reply_text("‚ùå –¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!")
        return
    
    reward = promo_data['reward']
    user_data['coins'] += reward
    user_data['used_promocodes'].append(promo_code)
    
    promo_data['used'] = promo_data.get('used', 0) + 1
    promocodes[promo_code] = promo_data
    
    if save_user_data(user_data) and save_promocodes(promocodes):
        await update.message.reply_text(f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ–ª—É—á–µ–Ω–æ {reward} –º–æ–Ω–µ—Ç!")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞!")

async def new_promo_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /newpromo <–∫–æ–¥> <–Ω–∞–≥—Ä–∞–¥–∞> [–ª–∏–º–∏—Ç] [–¥–Ω–∏]")
        return
    
    promo_code = context.args[0].upper()
    try:
        reward = int(context.args[1])
        limit = int(context.args[2]) if len(context.args) > 2 else 1
        days = int(context.args[3]) if len(context.args) > 3 else 30
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª!")
        return
    
    promocodes = load_promocodes()
    
    if promo_code in promocodes:
        await update.message.reply_text("‚ùå –¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return
    
    promo_data = {
        'reward': reward,
        'limit': limit,
        'used': 0,
        'created': datetime.now().isoformat(),
        'expires': (datetime.now() + timedelta(days=days)).isoformat()
    }
    
    promocodes[promo_code] = promo_data
    
    if save_promocodes(promocodes):
        await update.message.reply_text(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!\n"
            f"–ö–æ–¥: {promo_code}\n"
            f"–ù–∞–≥—Ä–∞–¥–∞: {reward} –º–æ–Ω–µ—Ç\n"
            f"–õ–∏–º–∏—Ç: {limit} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç: {days} –¥–Ω–µ–π"
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞!")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
async def auto_update_stats(context: ContextTypes.DEFAULT_TYPE):
    user_files = [f for f in os.listdir(USERS_PATH) if f.endswith('.json')]
    updated_count = 0
    
    for user_file in user_files:
        try:
            user_id = int(user_file.split('.')[0])
            user_data = get_user_data(user_id)
            
            if not user_data or 'cat' not in user_data:
                continue
            
            cat = user_data['cat']
            if not cat.get('last_update'):
                continue
                
            last_update = datetime.fromisoformat(cat['last_update'])
            
            if datetime.now() - last_update > timedelta(hours=3):
                cat['hunger'] = max(0, cat['hunger'] - 1)
                cat['cleanliness'] = max(0, cat['cleanliness'] - 1)
                cat['mood'] = max(0, cat['mood'] - 1)
                
                if all(stat == 0 for stat in [cat['hunger'], cat['cleanliness'], cat['mood'], cat['health']]):
                    cat.update({
                        'hunger': 5,
                        'cleanliness': 5,
                        'mood': 5,
                        'health': 5,
                        'level': max(1, cat['level'] - 1),
                        'exp': 0
                    })
                    
                    try:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text="üòø –¢–≤–æ–π –∫–æ—Ç–∏–∫ —É–±–µ–∂–∞–ª –∏–∑-–∑–∞ –ø–ª–æ—Ö–æ–≥–æ —É—Ö–æ–¥–∞!\n"
                                 "–ù–æ –æ–Ω –≤–µ—Ä–Ω—É–ª—Å—è –Ω–µ–º–Ω–æ–≥–æ –æ—Å–ª–∞–±–ª–µ–Ω–Ω—ã–º...\n"
                                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ª—É—á—à–µ —É—Ö–∞–∂–∏–≤–∞–π –∑–∞ –Ω–∏–º!"
                        )
                    except:
                        pass
                
                cat['last_update'] = datetime.now().isoformat()
                
                if save_user_data(user_data):
                    updated_count += 1
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_file}: {e}")
            continue
    
    if updated_count > 0:
        logger.info(f"–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    if data == 'open_box':
        await open_box(query, context)
    elif data == 'main_menu':
        await main_menu(query, context)
    elif data == 'instruction':
        await instruction(query, context)
    
    # –£—Ö–æ–¥ –∑–∞ –∫–æ—Ç–∏–∫–æ–º
    elif data == 'care_menu':
        await care_menu(query, context)
    elif data == 'care_feed':
        await handle_care_action(query, context, 'feed')
    elif data == 'care_clean':
        await handle_care_action(query, context, 'clean')
    elif data == 'care_play':
        await handle_care_action(query, context, 'play')
    elif data == 'care_heal':
        await handle_care_action(query, context, 'heal')
    elif data == 'care_photo':
        await handle_care_action(query, context, 'photo')
    
    # –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –º–æ–Ω–µ—Ç
    elif data == 'earn_coins':
        await earn_coins(query, context)
    elif data == 'earn_ad':
        await handle_earn_action(query, context, 'ad')
    elif data == 'earn_review':
        await handle_earn_action(query, context, 'review')
    elif data == 'earn_invite':
        await handle_earn_action(query, context, 'invite')
    elif data == 'buy_coins_menu':
        await buy_coins_menu(query, context)
    
    # –ú–∞–≥–∞–∑–∏–Ω
    elif data == 'shop_menu':
        await shop_menu(query, context)
    elif data == 'toys_shop':
        await toys_shop(query, context)
    elif data == 'beds_shop':
        await beds_shop(query, context)
    elif data.startswith('buy_'):
        item_id = data.replace('buy_', '')
        await handle_buy_action(query, context, item_id)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ç–∏–∫–µ
    elif data == 'my_cat':
        await my_cat(query, context)
    
    # –ü—Ä–æ–∫–∞—á–∫–∞
    elif data == 'upgrade_menu':
        await upgrade_cat_menu(query, context)
    elif data == 'upgrade_hunger':
        await handle_upgrade_action(query, context, 'hunger')
    elif data == 'upgrade_cleanliness':
        await handle_upgrade_action(query, context, 'cleanliness')
    elif data == 'upgrade_mood':
        await handle_upgrade_action(query, context, 'mood')
    elif data == 'upgrade_health':
        await handle_upgrade_action(query, context, 'health')
    
    # –†–µ–π—Ç–∏–Ω–≥
    elif data == 'leaderboard':
        await show_leaderboard(query, context)

def main() -> None:
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
    os.makedirs(USERS_PATH, exist_ok=True)
    
    print("üöÄ –ó–∞–ø—É—Å–∫ Kitty City Bot –Ω–∞ Railway...")
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {SCRIPT_DIR}")
    print(f"üíæ –ü–∞–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {USERS_PATH}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not BOT_TOKEN or BOT_TOKEN == "8429919809:AAE5lMwVmH86X58JFDxYRPA3bDbFMgSgtsw":
        print("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
    
    if not PAYMENT_PROVIDER_TOKEN:
        print("‚ö†Ô∏è  PAYMENT_PROVIDER_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–ª–∞—Ç–µ–∂–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("feedback", feedback))
    application.add_handler(CommandHandler("promo", use_promo_command))
    application.add_handler(CommandHandler("newpromo", new_promo_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
    job_queue = application.job_queue
    if job_queue:
        job_queue.run_repeating(auto_update_stats, interval=10800, first=10)
    
    print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    print("üê± Kitty City Bot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()